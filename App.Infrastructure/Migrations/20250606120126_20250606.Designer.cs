// <auto-generated />
using App.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250606120126_20250606")]
    partial class _20250606
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Model.Country.CountryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "US",
                            Name = "United States"
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "JP",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 4,
                            CountryCode = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 5,
                            CountryCode = "FR",
                            Name = "France"
                        });
                });

            modelBuilder.Entity("App.Domain.Model.User.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            Email = "taro.yamada@example.com",
                            FirstName = "Taro",
                            LastName = "Yamada",
                            UserName = "taro.yamada"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            Email = "hans.mueller@example.com",
                            FirstName = "Hans",
                            LastName = "Müller",
                            UserName = "hans.mueller"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 4,
                            Email = "emily.smith@example.com",
                            FirstName = "Emily",
                            LastName = "Smith",
                            UserName = "emily.smith"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 5,
                            Email = "sophie.martin@example.com",
                            FirstName = "Sophie",
                            LastName = "Martin",
                            UserName = "sophie.martin"
                        });
                });

            modelBuilder.Entity("App.Domain.Model.User.UserEntity", b =>
                {
                    b.HasOne("App.Domain.Model.Country.CountryEntity", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("App.Domain.Model.Country.CountryEntity", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
